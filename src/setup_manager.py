#!/usr/bin/env python3
"""
Gestor de configuraci√≥n inicial para la aplicaci√≥n
Verifica com0com, muestra di√°logos de descarga y configura puertos COM
"""

import tkinter as tk
from tkinter import ttk, messagebox
import webbrowser
import os
import sys
import json
import time
import logging
import ctypes
from datetime import datetime

# Agregar el directorio src al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from com0com_manager import Com0comManager

# Configurar logging para setup manager
def setup_setup_logging():
    """Configura el sistema de logging para el setup manager"""
    logger = logging.getLogger('SetupManager')
    logger.setLevel(logging.INFO)
    
    # Evitar duplicar handlers
    if not logger.handlers:
        # Handler para consola
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
        logger.addHandler(console_handler)
    
    return logger

setup_logger = setup_setup_logging()

def verify_admin_privileges():
    """
    Verifica que la aplicaci√≥n tenga permisos de administrador
    Esta funci√≥n se ejecuta antes de cualquier operaci√≥n del setup
    """
    try:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin()
        if not is_admin:
            setup_logger.critical("‚ùå PERMISOS DE ADMINISTRADOR REQUERIDOS")
            
            error_message = """‚ùå PERMISOS DE ADMINISTRADOR REQUERIDOS

Esta aplicaci√≥n necesita permisos de administrador para funcionar correctamente.

¬øPor qu√© se necesitan permisos de administrador?
‚Ä¢ Crear puertos COM virtuales
‚Ä¢ Modificar configuraciones del sistema
‚Ä¢ Acceder a drivers de com0com

SOLUCI√ìN:
Ejecuta la aplicaci√≥n usando 'run_chino_admin.bat' que solicitar√° permisos autom√°ticamente.

La aplicaci√≥n se cerrar√° ahora."""
            
            messagebox.showerror("Permisos de Administrador Requeridos", error_message)
            sys.exit(1)
        
        setup_logger.info("‚úÖ Permisos de administrador verificados correctamente")
        return True
        
    except Exception as e:
        setup_logger.error(f"‚ùå Error al verificar permisos de administrador: {e}")
        messagebox.showerror("Error", f"Error al verificar permisos de administrador: {e}")
        sys.exit(1)

class SetupManager:
    def __init__(self):
        # Verificar permisos de administrador ANTES de cualquier operaci√≥n
        verify_admin_privileges()
        
        self.config_file = os.path.join("config", "com_ports_config.json")
        self.manager = Com0comManager(self.config_file)
        setup_logger.info("üîß SetupManager inicializado")
        
    def run_initial_setup(self):
        """
        Ejecuta la configuraci√≥n inicial completa con di√°logos secuenciales
        Returns:
            bool: True si el setup fue exitoso, False si hay errores
        """
        setup_logger.info("üöÄ Iniciando configuraci√≥n inicial secuencial...")
        
        # 1. Verificar si com0com est√° instalado
        setup_logger.info("üìã Paso 1: Verificando instalaci√≥n de Com0com...")
        if not self.check_com0com_installation():
            setup_logger.error("‚ùå Setup fall√≥: Com0com no est√° disponible")
            return False
        
        # Pausa para que el usuario lea el mensaje
        time.sleep(1)
        
        # 2. Verificar si ya hay puertos configurados
        setup_logger.info("üìã Paso 2: Verificando puertos existentes...")
        if self.check_existing_ports():
            setup_logger.info("‚úÖ Puertos ya configurados, setup completado")
            messagebox.showinfo("Setup Completado", 
                              "‚úÖ Los puertos COM ya est√°n configurados.\n\n"
                              "La aplicaci√≥n est√° lista para usar.")
            return True
        
        # Pausa para que el usuario lea el mensaje
        time.sleep(1)
        
        # 3. Crear puertos COM
        setup_logger.info("üìã Paso 3: Creando nuevos puertos COM...")
        if not self.create_com_ports():
            setup_logger.error("‚ùå Setup fall√≥: No se pudieron crear los puertos")
            return False
        
        setup_logger.info("‚úÖ Configuraci√≥n inicial completada exitosamente")
        messagebox.showinfo("Setup Completado", 
                          "üéâ Configuraci√≥n inicial completada exitosamente.\n\n"
                          "Los puertos COM est√°n listos para usar.")
        return True
    
    def check_com0com_installation(self):
        """
        Verifica si com0com est√° instalado
        Muestra di√°logo de descarga si no lo est√°
        """
        if self.manager.is_installed():
            setup_logger.info("‚úÖ Com0com detectado correctamente")
            # Mostrar mensaje de confirmaci√≥n y esperar
            result = messagebox.showinfo("Com0com Detectado", 
                              "‚úÖ Com0com est√° instalado correctamente.\n\n"
                              "Continuando con la configuraci√≥n de puertos COM...")
            return True
        
        # Com0com no est√° instalado, mostrar di√°logo
        setup_logger.warning("‚ùå Com0com no est√° instalado")
        
        # Crear ventana de di√°logo
        dialog = tk.Tk()
        dialog.title("Com0com Requerido")
        dialog.geometry("500x300")
        dialog.resizable(False, False)
        
        # Centrar ventana
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (300 // 2)
        dialog.geometry(f"500x300+{x}+{y}")
        
        # Configurar como ventana modal
        dialog.transient()
        dialog.grab_set()
        
        # Frame principal
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="üîß Com0com Requerido", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # Mensaje
        message_text = """Esta aplicaci√≥n requiere Com0com para crear puertos COM virtuales.

Com0com es un driver gratuito que permite crear pares de puertos COM virtuales conectados entre s√≠.

¬øDeseas descargar e instalar Com0com ahora?"""
        
        message_label = ttk.Label(main_frame, text=message_text, 
                                 wraplength=450, justify=tk.CENTER)
        message_label.pack(pady=(0, 20))
        
        # Frame de botones
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=(0, 10))
        
        # Variables para el resultado
        result = {"action": None}
        
        def download_com0com():
            result["action"] = "download"
            dialog.destroy()
        
        def cancel_setup():
            result["action"] = "cancel"
            dialog.destroy()
        
        # Botones
        download_btn = ttk.Button(button_frame, text="üì• Descargar Com0com", 
                                 command=download_com0com, style="Accent.TButton")
        download_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        cancel_btn = ttk.Button(button_frame, text="‚ùå Cancelar", 
                               command=cancel_setup)
        cancel_btn.pack(side=tk.LEFT)
        
        # Estilo para bot√≥n principal
        style = ttk.Style()
        style.configure("Accent.TButton", background="#0078d4", foreground="white")
        
        # Esperar respuesta del usuario
        dialog.wait_window()
        
        if result["action"] == "download":
            # Abrir navegador con link de descarga
            download_url = "https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/powersdr-iq/setup_com0com_W7_x64_signed.exe"
            
            try:
                webbrowser.open(download_url)
                setup_logger.info("üåê Abriendo p√°gina de descarga de Com0com")
                messagebox.showinfo("Descarga Iniciada", 
                                  "Se ha abierto el navegador con la descarga de Com0com.\n\n"
                                  "Por favor:\n"
                                  "1. Descarga e instala Com0com\n"
                                  "2. Reinicia esta aplicaci√≥n\n"
                                  "3. El setup continuar√° autom√°ticamente")
            except Exception as e:
                setup_logger.error(f"‚ùå Error al abrir navegador: {e}")
                messagebox.showerror("Error", f"No se pudo abrir el navegador: {e}")
            
            return False
        
        elif result["action"] == "cancel":
            setup_logger.warning("‚ùå Setup cancelado por el usuario")
            messagebox.showwarning("Setup Cancelado", 
                                 "La aplicaci√≥n no puede funcionar sin Com0com.\n"
                                 "Puedes ejecutar el setup nuevamente m√°s tarde.")
            return False
        
        return False
    
    def check_existing_ports(self):
        """
        Verifica si ya existen puertos configurados en el archivo JSON
        """
        try:
            if not os.path.exists(self.config_file):
                setup_logger.info("   üìÅ No hay archivo de configuraci√≥n")
                return False
            
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            
            ports = config.get('ports', [])
            if len(ports) != 2:
                setup_logger.warning(f"   ‚ö†Ô∏è Configuraci√≥n incompleta: {len(ports)} puertos encontrados")
                return False
            
            setup_logger.info(f"   üìÅ Puertos encontrados: {ports[0]} y {ports[1]}")
            setup_logger.info(f"   ‚úÖ Configuraci√≥n v√°lida encontrada")
            return True
            
        except Exception as e:
            setup_logger.error(f"   ‚ùå Error al verificar puertos existentes: {e}")
            return False
    
    def create_com_ports(self):
        """
        Crea los puertos COM de forma s√≠ncrona con di√°logo de progreso
        """
        # Mostrar di√°logo de progreso
        progress_dialog = tk.Toplevel()
        progress_dialog.title("Creando Puertos COM")
        progress_dialog.geometry("400x150")
        progress_dialog.resizable(False, False)
        progress_dialog.transient()
        progress_dialog.grab_set()
        
        # Centrar ventana
        progress_dialog.update_idletasks()
        x = (progress_dialog.winfo_screenwidth() // 2) - (400 // 2)
        y = (progress_dialog.winfo_screenheight() // 2) - (150 // 2)
        progress_dialog.geometry(f"400x150+{x}+{y}")
        
        # Frame principal
        main_frame = ttk.Frame(progress_dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="üîß Creando Puertos COM", 
                               font=("Arial", 14, "bold"))
        title_label.pack(pady=(0, 10))
        
        # Mensaje de estado
        status_var = tk.StringVar(value="Buscando puertos disponibles...")
        status_label = ttk.Label(main_frame, textvariable=status_var)
        status_label.pack(pady=(0, 10))
        
        # Barra de progreso
        progress = ttk.Progressbar(main_frame, mode='indeterminate')
        progress.pack(fill=tk.X)
        progress.start()
        
        # Funci√≥n para actualizar estado
        def update_status(message):
            status_var.set(message)
            progress_dialog.update()
        
        # Crear puertos en thread separado
        def create_ports_thread():
            try:
                update_status("Buscando puertos disponibles...")
                com1, com2 = self.manager.create_auto_paired_ports()
                
                if com1 and com2:
                    update_status("Guardando configuraci√≥n...")
                    if self.manager._save_ports_config(com1, com2):
                        progress_dialog.after(0, lambda: finish_success(com1, com2))
                    else:
                        progress_dialog.after(0, lambda: finish_error("Error al guardar configuraci√≥n"))
                else:
                    progress_dialog.after(0, lambda: finish_error("No se pudieron crear los puertos"))
                    
            except Exception as e:
                setup_logger.error(f"‚ùå Error inesperado: {e}")
                progress_dialog.after(0, lambda: finish_error(f"Error inesperado: {e}"))
        
        def finish_success(com1, com2):
            progress_dialog.destroy()
            setup_logger.info(f"‚úÖ Puertos creados exitosamente: {com1} y {com2}")
            messagebox.showinfo("Configuraci√≥n Exitosa", 
                              f"üéâ Puertos COM configurados correctamente:\n\n"
                              f"‚Ä¢ Puerto 1: {com1}\n"
                              f"‚Ä¢ Puerto 2: {com2}\n\n"
                              f"Los puertos est√°n listos para usar.")
        
        def finish_error(error_msg):
            progress_dialog.destroy()
            setup_logger.error(f"‚ùå {error_msg}")
            messagebox.showerror("Error de Configuraci√≥n", 
                               f"‚ùå {error_msg}\n\n"
                               f"üí° Verifica que tengas permisos de administrador.")
        
        # Iniciar thread de creaci√≥n
        import threading
        thread = threading.Thread(target=create_ports_thread, daemon=True)
        thread.start()
        
        # Esperar a que termine
        thread.join()
        
        return True  # El resultado se maneja en los callbacks

def main():
    """Funci√≥n de prueba del setup manager"""
    setup = SetupManager()
    success = setup.run_initial_setup()
    
    if success:
        setup_logger.info("‚úÖ Setup completado exitosamente")
    else:
        setup_logger.error("‚ùå Setup fall√≥")

if __name__ == "__main__":
    main() 